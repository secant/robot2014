// Last Edited by Sean Wallace on 2/17/14  @ 2:22 PM
#include "WPILib.h" // Use the WPI Library
#include "Math.h" // Absolute Values Enabled
class RobotDemo : public SimpleRobot
{
	const static float driveSpeedMultiplier = 0.50;
	const static float driveStickBuffer = 0.25;
	Joystick logitech; // Logitech Gamepad (Joystick)
	Talon leftFront, leftBack, rightFront, rightBack; // Drive Motors
	Talon retrievalMotor; // Retrieval Motor attached to the wheels located at the top of the retreival arm
	Talon winchMotor; // Winch Motor attached to the Gearbox
	Compressor compressor; // Pneumatics Compressor for the Pneumatics system
	DoubleSolenoid leftArmSolenoid; // Left Retrevial Pneumatic Arm
	DoubleSolenoid rightArmSolenoid; // Right Retrevial Pneumatic Arm
	DoubleSolenoid dogSolenoid; // The dog gear needs to be engaged second to load. Disengaged first to shoot
	DoubleSolenoid ratchetSolenoid; // The ratchet needs to be engaged first to load. Disengaged second to shoot
	DigitalInput leftLimitSwitch; // Not actual limit switches. This is the left button to stop the catapult
	DigitalInput rightLimitSwitch; // Not actual limit switches. This is the right button to stop the catapult
	/****** Autonomous Equipment Start ******/
	DigitalInput leftPositionSwitch;
	DigitalInput rightPositionSwitch;
	Relay ringLight;
	AxisCamera &camera;
	/****** Autonomous Equipment End ******/
public:
	RobotDemo():
		logitech(1), // Joystick Port [Laptop USB]
		leftFront(1), leftBack(3), rightFront(2), rightBack(4), // Tank Drive Ports [PWM]
		retrievalMotor(6), winchMotor(5), // Retrieval and Catapult Winch Motor Ports [PWM]
		compressor(5,2), // Compressor connection ports [Digital Sidecar, Digital Sidecar]
		leftArmSolenoid(5,6), // Left Arm Solenoid ports [cRIO NI 9472, cRIO NI 9472]
		rightArmSolenoid(7,8), // Right Arm Solenoid ports [cRIO NI 9472, cRIO NI 9472]
		dogSolenoid(1,2), // Dog Solenoid ports [cRIO NI 9472, cRIO NI 9472]
		ratchetSolenoid(3,4), // Ratchet Solenoid ports [cRIO NI 9472, cRIO NI 9472]
		leftLimitSwitch(8), rightLimitSwitch(9), // Catapult Limit Switch ports [Digital Sidecar]
		/****** Autonomous Equipment Start ******/
		leftPositionSwitch(8), // Left Autonomous Switch [Digital Sidecar]
		rightPositionSwitch(9), // Right Autonomous Switch [Digital Sidecar]
		ringLight(1, Relay::kBothDirections), // Ringlight in Digital Sidecar
		camera(AxisCamera::GetInstance("10.28.53.11"))
		{
		//Expirations can be put here. WindRiver gets mad if you remove these curlybraces.
		camera.WriteResolution(AxisCamera::kResolution_320x240); // loads the camera's resolution
		}
		/****** Autonomous Equipment End ******/
	void stopDriving()
	{
		leftFront.Set(0);
		leftBack.Set(0);
		rightFront.Set(0);
		rightBack.Set(0);
	}
	void driveForward() //Creates a function to drive forward (sets it)
	{
		leftFront.Set(0.75);
		leftBack.Set(0.75);
		rightFront.Set(0.75);
		rightBack.Set(0.75);
	}
	void turnRight() //Creates a function to turn the robot a set amount right and then stops movement
	{
		leftFront.Set(0.5);
		leftBack.Set(0.5);
		rightFront.Set(-0.5);
		rightBack.Set(-0.5);
		Wait(1.5);
		leftFront.Set(0);
		leftBack.Set(0);
		rightFront.Set(0);
		rightBack.Set(0);
	}
	void turnLeft() //Creates a function to turn the robot a set amount left and then stops movement
	{
		leftFront.Set(-0.5);
		leftBack.Set(-0.5);
		rightFront.Set(0.5);
		rightBack.Set(0.5);
		Wait(1.5);
		leftFront.Set(0);
		leftBack.Set(0);
		rightFront.Set(0);
		rightFront.Set(0);
	}
	void turnLeftMore() //Creates a function to turn the robot a larger set amount left and then stops movement.
	{
		leftFront.Set(-1);
		leftBack.Set(-1);
		rightFront.Set(1);
		rightFront.Set(1);
		Wait(1.5);
		leftFront.Set(0);
		leftBack.Set(0);
		rightFront.Set(0);
		rightBack.Set(0);
	}
	void turnRightMore() //Creates a function to turn the robot a larger set amount right and then stops movement.
	{
		leftFront.Set(1);
		leftBack.Set(1);
		rightFront.Set(-1);
		rightFront.Set(-1);
		Wait(1.5);
		leftFront.Set(0);
		leftBack.Set(0);
		rightFront.Set(0);
		rightBack.Set(0);
	}
	void driveBackward() //Creates a function to drive backward (sets it)
	{
		leftFront.Set(-0.75);
		leftBack.Set(-0.75);
		rightFront.Set(-0.75);
		rightBack.Set(-0.75);
	}
	
	void Autonomous()
	{		
		DriverStationLCD *screen = DriverStationLCD::GetInstance();
		float pLower = 175; // min height of rectangle for comparison
		float pUpper = 500;	// max height of rectangle for comparison
		int criteriaCount = 1; // number of elements to include/exclude at a time
		int rejectMatches = 1;	// when set to true, particles that do not meet the criteria are discarded
		int connectivity = 1;	// declares connectivity value as 1; so corners are not ignored
		int filterFunction;	// removes small blobs
		int borderSetting;	// variable to store border settings, limit for rectangle
		int borderSize = 1;  // border for the camera frame (if you don't put this, DriverStation gets mad at you)
		ParticleFilterCriteria2 particleCriteria;	
		ParticleFilterOptions2 particleFilterOptions;
		int numParticles;
		particleCriteria.parameter = IMAQ_MT_AREA; //The Morphological measurement we use
		particleCriteria.lower = pLower; // The lower bound of the criteria range
		particleCriteria.upper = pUpper; // The upper bound of the criteria range
		particleCriteria.calibrated = FALSE; // We aren't calibrating to real world measurements. We don't need this.
		particleCriteria.exclude = TRUE; // Remove all particles that aren't in specific pLower and pUpper range
		particleFilterOptions.rejectMatches = rejectMatches; // Set to 1 above, so images that do not meet the criteria are discarded
		particleFilterOptions.rejectBorder = 0; // Set to 0 over here so border images are not discarded
		particleFilterOptions.connectivity8 = connectivity; // Sets the image image to 8 bit
		while ((IsAutonomous()))
			{
			HSLImage* imgpointer; // declares an image container as an HSL (hue-saturation-luminence) image
			imgpointer = camera.GetImage();	//tells camera to capture image
			ringLight.Set(Relay::kForward); //turns ringlight on
			BinaryImage* binIMG = NULL;	// declares a container to hold a binary image
			binIMG = imgpointer -> ThresholdHSL(0, 255, 0, 255, 235, 255);	// thresholds HSL image and places in the binary image container
			delete imgpointer;	// deletes the HSL image to free up memory on the cRIO
			Image* modifiedImage = imaqCreateImage(IMAQ_IMAGE_U8, 0); //create 8 bit image
			filterFunction = imaqParticleFilter4(modifiedImage, binIMG -> GetImaqImage(), &particleCriteria, criteriaCount, &particleFilterOptions, NULL, &numParticles); //The Particle Filter Function we use. (The ones before it are outdated)
			borderSetting = imaqSetBorderSize(modifiedImage, borderSize); // Sets a border size
			delete binIMG; //Deletes the Binary image
			int functionCountParticles; // stores number of particles
			int countparticles; // stores the number of particles for the measure particle function

			functionCountParticles = imaqCountParticles(modifiedImage, TRUE, &countparticles); // Counts the number of particles to be sent off later to the MeasureParticle function. Then it gets eaten by the measureparticle function
		
			int functionOne; // TRULY ARBITRARY name of the first measuring particle function (specifically for particle #1)
			int functionTwo; // TRULY ARBITRARY Name of the second measuring particle function (specifically for particle #2)
			double particleOneOrientation; // TRULY ARBITRARY name of the first particle it find
			double particleTwoOrientation; // TRULY ARBITRARY name of the second particle it finds

			functionOne = imaqMeasureParticle(modifiedImage, 0, FALSE, IMAQ_MT_ORIENTATION, &particleOneOrientation); // Function of measuring rectangle width is applied to particle 1 (unowidth)
			functionTwo = imaqMeasureParticle(modifiedImage, 1, FALSE, IMAQ_MT_ORIENTATION, &particleTwoOrientation); // Function of measuring width is applied to particle 2 (doswidth)

			screen->PrintfLine(DriverStationLCD::kUser_Line3,"W1: %f", particleOneOrientation); // Prints the applied information to particle 1. (Rectangle width)
			screen->PrintfLine(DriverStationLCD::kUser_Line4,"W2: %f", particleTwoOrientation);
			imaqDispose(modifiedImage);
			
			if (((leftPositionSwitch.Get()) == 0) && ((rightPositionSwitch.Get()) == 1)) // Left switch set on, right switch set off
				{
					screen -> PrintfLine(DriverStationLCD::kUser_Line1,"Left Position:F"); // Left position and facing forward
					if (75 < (particleOneOrientation || particleTwoOrientation) < 105) // The target should be hot. Now it goes to the other goal.
						/* Theoretically particle 1 or 2 should register as exactly 90 (the particle is vertical). We can edit these later. */
					{
						screen -> PrintfLine(DriverStationLCD::kUser_Line6,"Left Position Hot");
						// These DEFINITELY need to be tested. All of them. Forreal.
						turnRight();
						driveForward();
						Wait(3); 
						stopDriving();
						//shootCatapult();
					}
					else // The target isn't hot. So it starts going toward this not hot goal.
					{
						screen -> PrintfLine(DriverStationLCD::kUser_Line6,"Left Position Not Hot");
						// These DEFINITELY need to be tested. All of them. Forreal.
						driveForward();
						Wait(3);
						stopDriving();
						//shootCatapult();
					}
				}
				else if (((leftPositionSwitch.Get()) == 1) && ((rightPositionSwitch.Get()) == 1)) // Left switch off and right switch off
				{
					screen -> PrintfLine(DriverStationLCD::kUser_Line1,"Middle Position:R"); // Middle position and facing right
					if (75 < (particleOneOrientation || particleTwoOrientation) < 105) // The target should be hot. Now it goes to the other goal.
						/* Theoretically particle 1 or 2 should register as exactly 90 (the particle is vertical). We can edit these later. */
					{
						screen -> PrintfLine(DriverStationLCD::kUser_Line6,"Middle Position Hot");
						// These DEFINITELY need to be tested. All of them. Forreal.
						turnLeftMore();
						driveForward();
						Wait(3); 
						stopDriving();
						//shootCatapult();
					}
					else if (((leftPositionSwitch.Get()) == 0) && ((rightPositionSwitch.Get()) == 0)) // Left switch on and right switch on
					{
						screen -> PrintfLine(DriverStationLCD::kUser_Line1,"Middle Position:L"); // Middle position and facing left
						if (75 < (particleOneOrientation || particleTwoOrientation) < 105) // The target should be hot. Now it goes to the other goal.
							/* Theoretically particle 1 or 2 should register as exactly 90 (the particle is vertical). We can edit these later. */
						{
							screen -> PrintfLine(DriverStationLCD::kUser_Line6,"Middle Position Hot");
							// These DEFINITELY need to be tested. All of them. Forreal.
							turnRightMore();
							driveForward();
							Wait(3); 
							stopDriving();
							//shootCatapult();
						}
						else // The target isn't hot. So it starts going toward this not hot goal.
						{
							screen -> PrintfLine(DriverStationLCD::kUser_Line6,"Middle Position Not Hot");
							// These DEFINITELY need to be tested. All of them. Forreal.
							driveForward();
							Wait(3);
							stopDriving();
							//shootCatapult();
							driveForward();
							Wait(3);
							stopDriving();
						}
					}
					else if (((leftPositionSwitch.Get()) == 1) && ((rightPositionSwitch.Get()) == 0)) // Left switch off and right switch on
					{
						screen -> PrintfLine(DriverStationLCD::kUser_Line6,"Right Position"); // Right position and facing forward
						if (75 < (particleOneOrientation || particleTwoOrientation) < 105) // The target should be hot. Now it goes to the other goal.
							/* Theoretically particle 1 or 2 should register as exactly 90 (the particle is vertical). We can edit these later. */
						{
							screen -> PrintfLine(DriverStationLCD::kUser_Line6,"Right Position Hot");
							// These DEFINITELY need to be tested. All of them. Forreal.
							turnLeft();
							driveForward();
							Wait(3); 
							stopDriving();
							//shootCatapult();
						}
						else // The target isn't hot. So it starts going toward this not hot goal.
						{
							screen -> PrintfLine(DriverStationLCD::kUser_Line6,"Right Position Not Hot");
							// These DEFINITELY need to be tested. All of them. Forreal.
							driveForward();
							Wait(3);
							stopDriving();
							//shootCatapult();
						}
					}
			}
	}
	}
	void OperatorControl()
	{
		compressor.Start(); // The class can run independently. This compressor will start and stop on its own to keep pressure under 120 PSI
		DriverStationLCD *screen = DriverStationLCD::GetInstance(); // Enables Driver Station Printing
		bool autoLoad = false;
		while (IsOperatorControl())
		{
			/****** AUTO LOAD FUNCTION START *****/
			if(logitech.GetRawButton(10))
					autoLoad = true;
			if(logitech.GetRawButton(1))
					autoLoad = false;	
			/****** AUTO LOAD FUNCTION END *****/
			
			/****** TANK DRIVE START ******/
			if (fabs(logitech.GetRawAxis(2)) > driveStickBuffer) // If the left Y Axis on the Joystick is moved beyond the driveStickBuffer
				{
					leftFront.Set((driveSpeedMultiplier) * logitech.GetRawAxis(2)*(-1)); // The left motors are facing in an opposite direction
					leftBack.Set((driveSpeedMultiplier) * logitech.GetRawAxis(2)*(-1)); // The left motors are facing in an opposite direction
				}		
			else
				{
					leftFront.Set(0); // Turns Left Motor 1 off
					leftBack.Set(0); // Turns Left Motor 2 off
				}
			if (fabs(logitech.GetRawAxis(4)) > driveStickBuffer) // If the right Y Axis on the Joystick is moved beyond the driveStickBuffer
				{
					rightFront.Set((driveSpeedMultiplier) * logitech.GetRawAxis(4)); // Sets motor speed to Joystick position times the driveSpeedMultiplier
					rightBack.Set((driveSpeedMultiplier) * logitech.GetRawAxis(4)); // Sets motor speed to Joystick position times the driveSpeedMultiplier
				}
			else
				{
					rightFront.Set(0);  // Turns Right Motor 2 off
					rightBack.Set(0);  // Turns Right Motor 2 off
				}
			/****** TANK DRIVE END ******/
			
			/****** BALL RETRIEVAL START ******/
			if (logitech.GetRawButton(6)) //Press Upper Right Trigger to go down and start ball motor
				{		
					retrievalMotor.Set(1); // Turns on the motor that spins the wheel to bring in the ball
					leftArmSolenoid.Set(DoubleSolenoid::kForward); // Pushes the pneumatic piston forward to lower the retrieval arm
					rightArmSolenoid.Set(DoubleSolenoid::kForward); // Pushes the pneumatic piston forward to lower the retrieval arm
				}
			else if (logitech.GetRawButton(8)) //Press Lower Right Trigger to go up and stop ball motor
				{
					retrievalMotor.Set(0); // Turns off the motor that spins the wheel to bring in the ball
					leftArmSolenoid.Set(DoubleSolenoid::kReverse); // Brings the pneumatic piston backward to raise the retrieval arm
					rightArmSolenoid.Set(DoubleSolenoid::kReverse); // Brings the pneumatic piston backward to raise the retrieval arm
				}
			else
				{
					retrievalMotor.Set(0); // Turns off the motor that spins the wheel to bring in the ball
					leftArmSolenoid.Set(DoubleSolenoid::kOff); // Does nothing to the retreival arm piston
					rightArmSolenoid.Set(DoubleSolenoid::kOff); // Does nothing to the retreival arm piston
				}
			/****** BALL RETRIEVAL END ******/
			
			/****** CATAPULT RELEASE START ******/ // Limit Buttons pressed, winchMotor is inactive, and Button A on the joystick is pressed
			if ((leftLimitSwitch.Get()== 0 || rightLimitSwitch.Get()== 0) && winchMotor.Get() == 0 &&  logitech.GetRawButton(2))
				{
					stopDriving(); // Stops the drive so the robot doesn't flip on itself or something
					winchMotor.Set(0); // Redundant line for extra safety that can be removed after testing (The winch should already be off)
					dogSolenoid.Set(DoubleSolenoid::kReverse); // Brings the pneumatic piston backward to disengage the dog gear
					Wait(0.5); // Giving the pistons time to disengage properly
					ratchetSolenoid.Set(DoubleSolenoid::kReverse); // Brings the pneumatic piston backward to disengage the ratchet
					Wait(5); // Waits 5 seconds after shooting before starting to load the catapult
				}
			/****** CATAPULT RELEASE END ******/		
			
			/******* AUTOLOAD CATAPULT START ******/ // Limit Buttons not pressed, both dogSolenoid and ratchetSolenoids are disengaged
			if (autoLoad = true)
				{	
					if (leftLimitSwitch.Get() == 1 && rightLimitSwitch.Get() == 1) // If Limit Switch Buttons are not pressed
						{
						if ((dogSolenoid.Get() && ratchetSolenoid.Get()) == DoubleSolenoid::kReverse) //If both solenoids are disengaged, starts the loading process from scratch
							{
								//Stop(); //Stops the motors so bad things don't happen --We should stop force stop the drive for autonomous to shoot, not to load right?--
								Wait(2); // Giving it time just for testing -- REMOVE AFTER TESTING --
								winchMotor.Set(0.05); // Gears need to be moving slowly to allow the dog gear to engage properly
								dogSolenoid.Set(DoubleSolenoid::kForward); // Pushes the pneumatic piston forward to engage the dog gear
								Wait(0.5); // Giving the pistons time to engage properly
								winchMotor.Set(0); // Now that the dog gear is engaged, the gears do not have to move
								ratchetSolenoid.Set(DoubleSolenoid::kForward); // Pushes the pneumatic piston forward to engage the ratchet
								Wait(0.5); // Giving the pistons time to engage properly
								winchMotor.Set(1); //Now starts the winch motor to load the catapult
							}
						else // If Limit Switch Buttons are not pressed
								winchMotor.Set(1); // Continues to run the Winch Motor
						}
					else // If the Catapult Left & Right Limit Switches are (0,0), (0,1), (1,0)
					{
						winchMotor.Set(0); // Stops the Winch Motor since one or more buttons are pressed
						if ((dogSolenoid.Get() == DoubleSolenoid::kReverse) && (ratchetSolenoid.Get() == DoubleSolenoid::kForward)) // If the Dog Gear is disengaged but the ratchet is engaged
							{
								winchMotor.Set(0.05); // Gears need to be moving slowly to allow the dog gear to engage properly. Might want to test this since the catapult's already loaded.
								dogSolenoid.Set(DoubleSolenoid::kForward); // Engages the dog gear so both dog gear and ratchet are engaged before shooting for safety
								Wait(0.5); // Giving the pistons time to engage properly
								winchMotor.Set(0); // Now that the dog gear is engaged, the gears do not have to move
							}
						else if ((dogSolenoid.Get() == DoubleSolenoid::kForward) && (ratchetSolenoid.Get() == DoubleSolenoid::kReverse)) // If the dog gear is engaged but the ratchet is disengaged
							{
								ratchetSolenoid.Set(DoubleSolenoid::kForward); // Engages the ratchet so that both dog gear and ratchet are engaged before shooting for safety
								Wait(0.5); // Giving the pistons time to engage properly
							}
					}
				}
			/****** AUTOLOAD CATAPULT END ******/
			
			/****** MANUAL LOAD CATAPULT START ******/
			if (autoLoad = false)
				{
					if ((leftLimitSwitch.Get() == 1 && rightLimitSwitch.Get() == 1) && (logitech.GetRawButton(2))) // If Limit Switch Buttons are not pressed and button 2 is pressed
						{
							stopDriving(); //stops the tank drive motors so bad things don't happen
							Wait(2); // Giving it time just for testing -- REMOVE AFTER TESTING --
							winchMotor.Set(0.05); // Gears need to be moving slowly to allow the dog gear to engage properly
							dogSolenoid.Set(DoubleSolenoid::kForward); // Pushes the pneumatic piston forward to engage the dog gear
							Wait(0.5); // Giving the pistons time to engage properly
							winchMotor.Set(0); // Now that the dog gear is engaged, the gears do not have to move
							ratchetSolenoid.Set(DoubleSolenoid::kForward); // Pushes the pneumatic piston forward to engage the ratchet
							Wait(0.5); // Giving the pistons time to engage properly
							winchMotor.Set(1); //Now starts the winch motor to load the catapult
						}
					else if (leftLimitSwitch.Get() == 1 && rightLimitSwitch.Get() == 1)
							winchMotor.Set(1);
					else
							winchMotor.Set(0);
				}
			/****** MANUAL LOAD CATAPULT END ******/
			screen -> PrintfLine(DriverStationLCD::kUser_Line1,"Pressure:%f", compressor.GetPressureSwitchValue()); // Print Pneumatics Pressure
			screen -> PrintfLine(DriverStationLCD::kUser_Line2,"LimSwi:%d and %d", leftLimitSwitch.Get(), rightLimitSwitch.Get()); // Print Left&Right Buttons
			screen -> PrintfLine(DriverStationLCD::kUser_Line3,"WinchMotor:%f", winchMotor.Get()); // Print WinchMotor State
			screen -> PrintfLine(DriverStationLCD::kUser_Line4,"Autoload:%s", autoLoad? "On" : "Off" ); // Print state of autoLoad
			//screen -> PrintfLine(DriverStationLCD::kUser_Line5,""); // Free Line for now
			screen -> PrintfLine(DriverStationLCD::kUser_Line6,"LDri:%f RDri:%f", leftFront.Get(), rightFront.Get()); // Print Tank Drive Motor State
			Wait(0.005); // Waits to run the loop every 0.005 seconds so the cRIO doesn't explode
			screen->UpdateLCD(); // Updates the Driverstation LCD in the loop
		}
		compressor.Stop(); // Allows the compressor to stop running if the mode is switched outside of OperatorControl
	}
	void Test() // DONT TOUCH THIS AREA. I KEEL YOU.
	{
	}
};
START_ROBOT_CLASS(RobotDemo);
