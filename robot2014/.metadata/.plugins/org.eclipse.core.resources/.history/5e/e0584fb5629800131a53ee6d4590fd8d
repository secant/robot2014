// Last Edited by Sean Wallace on 2/17/14  @ 2:22 PM
#include "WPILib.h" // Use the WPI Library
#include "Math.h" // Absolute Values Enabled
class RobotDemo : public SimpleRobot
{
	const static float driveSpeedMultiplier = 0.50;
	const static float driveStickBuffer = 0.25;
	Joystick logitech; // Logitech Gamepad (Joystick)
	Talon leftFront, leftBack, rightFront, rightBack; // Drive Motors
	Talon retrievalMotor; // Retrieval Motor attached to the wheels located at the top of the retreival arm
	Talon winchMotor; // Winch Motor attached to the Gearbox
	Compressor compressor; // Pneumatics Compressor for the Pneumatics system
	DoubleSolenoid leftArmSolenoid; // Left Retrevial Pneumatic Arm
	DoubleSolenoid rightArmSolenoid; // Right Retrevial Pneumatic Arm
	DoubleSolenoid dogSolenoid; // The dog gear needs to be engaged second to load. Disengaged first to shoot
	DoubleSolenoid ratchetSolenoid; // The ratchet needs to be engaged first to load. Disengaged second to shoot
	DigitalInput leftLimitSwitch; // Not actual limit switches. This is the left button to stop the catapult
	DigitalInput rightLimitSwitch; // Not actual limit switches. This is the right button to stop the catapult
	/****** Autonomous Equipment Start ******/
	//DigitalInput leftPositionSwitch;
	//DigitalInput rightPositionSwitch;
	//Relay ringLight;
	//AxisCamera &camera;
	/****** Autonomous Equipment End ******/
public:
	RobotDemo():
		logitech(1), // Joystick Port [Laptop USB]
		leftFront(1), leftBack(3), rightFront(2), rightBack(4), // Tank Drive Ports [PWM]
		retrievalMotor(6), winchMotor(5), // Retrieval and Catapult Winch Motor Ports [PWM]
		compressor(5,2), // Compressor connection ports [Digital Sidecar, Digital Sidecar]
		leftArmSolenoid(5,6), // Left Arm Solenoid ports [cRIO NI 9472, cRIO NI 9472]
		rightArmSolenoid(7,8), // Right Arm Solenoid ports [cRIO NI 9472, cRIO NI 9472]
		dogSolenoid(1,2), // Dog Solenoid ports [cRIO NI 9472, cRIO NI 9472]
		ratchetSolenoid(3,4), // Ratchet Solenoid ports [cRIO NI 9472, cRIO NI 9472]
		leftLimitSwitch(8), rightLimitSwitch(9) // Catapult Limit Switch ports [Digital Sidecar]
	/****** Autonomous Equipment Start ******/
	//leftPositionSwitch(8), // Left Autonomous Switch [Digital Sidecar]
	//rightPositionSwitch(9), // Right Autonomous Switch [Digital Sidecar]
	//ringLight(1, Relay::kBothDirections), // Ringlight in Digital Sidecar
	//camera(AxisCamera::GetInstance("10.28.53.11"))
	{
	//Expirations can be put here. WindRiver gets mad if you remove these curlybraces.
	//camera.WriteResolution(AxisCamera::kResolution_320x240); // loads the camera's resolution
	}/****** Autonomous Equipment End ******/
	void Autonomous()
	{
		
	}
	void OperatorControl()
	{
		compressor.Start(); // The class can run independently. This compressor will start and stop on its own to keep pressure under 120 PSI
		DriverStationLCD *screen = DriverStationLCD::GetInstance(); // Enables Driver Station Printing
		while (IsOperatorControl())
		{
			/****** TANK DRIVE START ******/
			if (fabs(logitech.GetRawAxis(2)) > driveStickBuffer) // If the left Y Axis on the Joystick is moved beyond the driveStickBuffer
				{
					leftFront.Set((driveSpeedMultiplier) * logitech.GetRawAxis(2)*(-1)); // The left motors are facing in an opposite direction
					leftBack.Set((driveSpeedMultiplier) * logitech.GetRawAxis(2)*(-1)); // The left motors are facing in an opposite direction
				}		
			else
				{
					leftFront.Set(0); // Turns Left Motor 1 off
					leftBack.Set(0); // Turns Left Motor 2 off
				}
			if (fabs(logitech.GetRawAxis(4)) > driveStickBuffer) // If the right Y Axis on the Joystick is moved beyond the driveStickBuffer
				{
					rightFront.Set((driveSpeedMultiplier) * logitech.GetRawAxis(4)); // Sets motor speed to Joystick position times the driveSpeedMultiplier
					rightBack.Set((driveSpeedMultiplier) * logitech.GetRawAxis(4)); // Sets motor speed to Joystick position times the driveSpeedMultiplier
				}
			else
				{
					rightFront.Set(0);  // Turns Right Motor 2 off
					rightBack.Set(0);  // Turns Right Motor 2 off
				}
			/****** TANK DRIVE END ******/
			
			/****** BALL RETRIEVAL START ******/
			if (logitech.GetRawButton(6)) //Press Upper Right Trigger to go down and start ball motor
				{		
					retrievalMotor.Set(1); // Turns off the motor that spins the wheel to bring in the ball
					leftArmSolenoid.Set(DoubleSolenoid::kForward); // Pushes the pneumatic piston forward to lower the retrieval arm
					rightArmSolenoid.Set(DoubleSolenoid::kForward); // Pushes the pneumatic piston forward to lower the retrieval arm
				}
			else if (logitech.GetRawButton(8)) //Press Lower Right Trigger to go up and stop ball motor
				{
					retrievalMotor.Set(0); // Turns on the motor that spins the wheel to bring in the ball
					leftArmSolenoid.Set(DoubleSolenoid::kReverse); // Brings the pneumatic piston backward to raise the retrieval arm
					rightArmSolenoid.Set(DoubleSolenoid::kReverse); // Brings the pneumatic piston backward to raise the retrieval arm
				}
			else
				{
					retrievalMotor.Set(0); // Turns off the motor that spins the wheel to bring in the ball
					leftArmSolenoid.Set(DoubleSolenoid::kOff); // Does nothing to the retreival arm piston
					rightArmSolenoid.Set(DoubleSolenoid::kOff); // Does nothing to the retreival arm piston
				}

			/****** BALL RETRIEVAL END ******/

			/****** CATAPULT RELEASE START ******/ // Limit Buttons pressed, winchMotor is inactive, and Button A on the joystick is pressed
			if ((leftLimitSwitch.Get()== 0 || rightLimitSwitch.Get( )== 0) && winchMotor.Get() == 0 &&  logitech.GetRawButton(2))
				{
					dogSolenoid.Set(DoubleSolenoid::kReverse); // Brings the pneumatic piston backward to disengage the dog gear
					Wait(0.5); // Giving the pistons time to disengage properly
					ratchetSolenoid.Set(DoubleSolenoid::kReverse); // Brings the pneumatic piston backward to disengage the ratchet
					Wait(5); // Waits 5 seconds after shooting before starting to load the catapult
				}
			/****** CATAPULT RELEASE END ******/		
			
			/******* LOAD CATAPULT START ******/ // Limit Buttons not pressed, both dogSolenoid and ratchetSolenoids are disengaged
			if (((leftLimitSwitch.Get() == 1 || rightLimitSwitch.Get() == 1)) && 
				(dogSolenoid.Get() == DoubleSolenoid::kReverse && ratchetSolenoid.Get() == DoubleSolenoid::kReverse))
				{
					Wait(2); // Giving it time just for testing -- REMOVE AFTER TESTING --
					winchMotor.Set(0.05); // Gears need to be moving slowly to allow the dog gear to engage properly
					dogSolenoid.Set(DoubleSolenoid::kForward); // Pushes the pneumatic piston forward to engage the dog gear
					Wait(0.5); // Giving the pistons time to engage properly
					winchMotor.Set(0); // Now that the dog gear is engaged, the gears do not have to move
					ratchetSolenoid.Set(DoubleSolenoid::kForward); // Pushes the pneumatic piston forward to engage the ratchet
					Wait(0.5); // Giving the pistons time to engage properly
					winchMotor.Set(1); //Now starts the winch motor to load the catapult
				}
			else if((leftLimitSwitch.Get()==1 && rightLimitSwitch.Get()==1))
				{
					winchMotor.Set(1);
				}
			else
				{
					winchMotor.Set(0); // Stops the winch motor now that the catapult is loaded (Limit switches should output 0)
				}
			/****** LOAD CATAPULT END ******/
			
			screen -> PrintfLine(DriverStationLCD::kUser_Line1,"Pressure:%f", compressor.GetPressureSwitchValue()); // Print Pneumatics Pressure
			screen -> PrintfLine(DriverStationLCD::kUser_Line2,"LimSwi:%d and %d", leftLimitSwitch.Get(), rightLimitSwitch.Get()); // Print Left&Right Buttons
			screen -> PrintfLine(DriverStationLCD::kUser_Line3,"WinchMotor:%f", winchMotor.Get()); // Print WinchMotor State
			screen -> PrintfLine(DriverStationLCD::kUser_Line4,"ComprLimSwi:%d", emergencyCompressorLimitSwitch.Get()); // Print state of Compressor Switch
			screen -> PrintfLine(DriverStationLCD::kUser_Line5,""); // Free Line for now
			screen -> PrintfLine(DriverStationLCD::kUser_Line6,"LDri:%f RDri:%f", leftFront.Get(), rightFront.Get()); // Print Tank Drive Motor State
			Wait(0.005); // Waits to run the loop every 0.005 seconds so the cRIO doesn't explode
			screen->UpdateLCD(); // Updates the Driverstation LCD in the loop
			if (logitech.GetRawButton(9)) //Press "BACK" to stop the compressor class
			{
				compressor.Stop();
			}
			else if (logitech.GetRawButton(10)) //Press "START" to start the compressor class
			{
				compressor.Start();
			}
		}
		compressor.Stop(); // Allows the compressor to stop running if the mode is switched outside of OperatorControl
	}
	void Test() // DONT TOUCH THIS AREA. I KEEL YOU.
	{
		compressor.Start();
		DriverStationLCD *screen = DriverStationLCD::GetInstance();
		while (IsTest())
		{
			if (logitech.GetRawButton(6))
				{
					dogSolenoid.Set(DoubleSolenoid::kForward);
				}
			else if (logitech.GetRawButton(8))
				{
					dogSolenoid.Set(DoubleSolenoid::kReverse);
				}
			else if (logitech.GetRawButton(5))
				{
					ratchetSolenoid.Set(DoubleSolenoid::kForward);
				}
			else if (logitech.GetRawButton(7))
				{
					ratchetSolenoid.Set(DoubleSolenoid::kReverse);
				}
			else if (logitech.GetRawButton(2))
				{
					winchMotor.Set(0.5);
				}
			else if (logitech.GetRawButton(3))
				{
					winchMotor.Set(0.05);
				}
			else
				{
					winchMotor.Set(0);
				}
			screen -> PrintfLine(DriverStationLCD::kUser_Line1,"Pressure:%f", compressor.GetPressureSwitchValue());
			screen -> PrintfLine(DriverStationLCD::kUser_Line2,"B6%d B8%d B5%d B7%d", logitech.GetRawButton(6), logitech.GetRawButton(8), logitech.GetRawButton(5), logitech.GetRawButton(7));
			screen -> PrintfLine(DriverStationLCD::kUser_Line3,"WinchMotor:%f", winchMotor.Get());
			Wait(0.005);
			screen->UpdateLCD();
		}
		compressor.Stop();
	}
};
START_ROBOT_CLASS(RobotDemo);
