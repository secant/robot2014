#include "WPILib.h"
#include <string.h>
#include <math.h>
#include <nivision.h>
#include "Relay.h"
#include "Vision/MonoImage.h"
#include <algorithm>
#include "Vision/ColorImage.h"

class RobotDemo : public SimpleRobot
{
	Relay spike;

public:
	RobotDemo():
		spike (1,Relay::kBothDirections)
	{
	}

	void OperatorControl()
	{
		AxisCamera &camera = AxisCamera::GetInstance("10.28.53.11");
		DriverStationLCD *screen = DriverStationLCD::GetInstance();
		int count = 0;
		while (IsOperatorControl())
		{
			spike.Set(Relay::kForward);
			count++;
			
			HSLImage* imgpointer;
			imgpointer = camera.GetImage();
			BinaryImage* binIMG = NULL;
			binIMG = imgpointer -> ThresholdHSL(1, 255, 1, 255, 235, 255);
			binIMG -> Write("/tmp/thresh.jpg");
			imaqWriteFile(binIMG -> GetImaqImage(), "/tmp/thresh2.jpg", NULL);
			delete imgpointer;
			
			//Image* Small = imaqCreateImage(IMAQ_IMAGE_U8, 0);

			int imaqSizeFilter(HSLImage* imgpointer, BinaryImage* binIMG);
			//int imaqSizeFilter();
			//int imaqSizeFilter(IMAQ_IMAGE_U8(true));
			//int imaqSizeFilter(int '4');
			//HLSImage* AxisCamera, int, '4'
			//smallshapesTwo = imaqSizeFilter(Small, binIMG -> GetImaqImage(), TRUE, 1, 1 keepSize, StructuringElement 1);
			//smallshapesTwo = imaqSizeFilter(Small, binIMG -> GetImaqImage(), TRUE, 1, 1 keepSize, StructuringElement 1);
			
			//Image* Convex = imaqCreateImage(IMAQ_IMAGE_U8, 0);
			//int returnvalue;
			//returnvalue = imaqConvexHull(Convex, binImg->GetImaqImage(), TRUE);
			
			screen -> UpdateLCD();
		}
	}
	void Test() {

	}
};

START_ROBOT_CLASS(RobotDemo);


