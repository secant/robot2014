#include "WPILib.h"	
#include "Math.h"
//Last modified on Feb. 13 by: Sean
class RobotDemo : public SimpleRobot
{
	/*HEY DRIVERS LOOK AT THIS*/
	/*HEY DRIVERS LOOK AT THIS*/
	/*HEY DRIVERS LOOK AT THIS*/
	/*IF YOU WANT IT TO DRIVE FASTER OR SLOWER, EDIT THE "driverSpeedMultiplier". IT CAN GO ANYWHERE FROM 0<X<1*/
	/*IF YOU WANT TO CHANGE WHEN THE ROBOT MOVES AFTER A SMALL INCREMENT IS MOVED ON THE JOYSTICK, EDIT THE "driveStickBuffer". I RECCOMEND IT BEING 0<X<0.5*/
	/*EXAMPLE MODIFICATION:*/
	// const static float driveSpeedMultiplier = 0.75;
	const static float driveSpeedMultiplier = 0.50;
	/*EXAMPLE MODIFICATION:*/
	//const static float driveStickBuffer = 0.10;
	const static float driveStickBuffer = 0.25;
	/*HEY DRIVERS LOOK AT THIS*/
	/*HEY DRIVERS LOOK AT THIS*/
	/*HEY DRIVERS LOOK AT THIS*/
	/*I suck*/
	Talon leftFront, leftBack, rightFront, rightBack;
	Joystick logitech;
	DigitalInput buttonOne;
	DigitalInput buttonTwo;
	DigitalInput togglebuttonOne;
	DigitalInput togglebuttonTwo;
	Compressor compressor;
public:
	RobotDemo():
		leftFront(1), leftBack(3), rightFront(2), rightBack(4), 
		logitech(1), 
		buttonOne(8), buttonTwo(9),
		togglebuttonOne(6), //Left
		togglebuttonTwo(7),  //Right
		compressor(5,2)
	{}
	

	void Autonomous()
	{
		DriverStationLCD *screen = DriverStationLCD::GetInstance(); 
		while ((IsAutonomous()))
		{
		//screen->PrintfLine(DriverStationLCD::kUser_Line1, "Position_%");
			//Right button on && left off
			if (((togglebuttonOne.Get()) == 1) && ((togglebuttonTwo.Get()) == 0))
			{
				screen -> PrintfLine(DriverStationLCD::kUser_Line1,"Right Position");
			}
			//both on or off
			else if ((((togglebuttonOne.Get()) == 1) && ((togglebuttonTwo.Get()) == 1))||((togglebuttonOne.Get()) == 0) && ((togglebuttonTwo.Get()) == 0))
			{
				screen -> PrintfLine(DriverStationLCD::kUser_Line1,"Middle Position");
			}
			//Left button on && right off
			else if (((togglebuttonOne.Get()) == 0) && ((togglebuttonTwo.Get()) == 1))
			{
				screen -> PrintfLine(DriverStationLCD::kUser_Line1,"Left Position");
			}
			
			if (compressor.GetPressureSwitchValue() == 0)
			{
			compressor.Stop();
			screen -> PrintfLine(DriverStationLCD::kUser_Line2,"Compressor On!");
			screen -> PrintfLine(DriverStationLCD::kUser_Line3,"ButtonValue_%d", compressor.GetPressureSwitchValue());
			
			}
			
			else
			{
			compressor.Start();
			screen -> PrintfLine(DriverStationLCD::kUser_Line2,"Compressor Off!");
			screen -> PrintfLine(DriverStationLCD::kUser_Line3,"ButtonValue_%d", compressor.GetPressureSwitchValue());
			}
			
			Wait(0.005);
			screen -> UpdateLCD();
		}
	}

	/*void Autonomous()
	{
		DriverStationLCD *screen = DriverStationLCD::GetInstance();
		while (IsAutonomous())
		{
			if (compressor.GetPressureSwitchValue() == 0)
				{
				compressor.Start();
				screen -> PrintfLine(DriverStationLCD::kUser_Line1,"Compressor On!");
				}
			else
				{
				compressor.Stop();
				screen -> PrintfLine(DriverStationLCD::kUser_Line1,"Compressor Off!");
				}
			Wait(0.005);
			screen -> UpdateLCD();
		}
	}
	*/
	/*void Practice()
		{
		DriverStationLCD *screen = DriverStationLCD::GetInstance(); 
		while (IsPractice())
			{
			if ((buttonOne.Get()) == 0)
				{
				compressor.Start();
				screen -> PrintfLine(DriverStationLCD::kUser_Line1,"Compressor On!");
				}
			else
				{
				compressor.Stop();
				screen -> PrintfLine(DriverStationLCD::kUser_Line1,"Compressor Off!");
				}
			Wait(0.005);
			screen -> UpdateLCD();
			}
		}*/
	
	void OperatorControl()
	{
		DriverStationLCD *screen = DriverStationLCD::GetInstance(); 
		while (IsOperatorControl())
		{

			screen -> PrintfLine(DriverStationLCD::kUser_Line1,"LeftTopM1_%f", logitech.GetRawAxis(2));
			screen -> PrintfLine(DriverStationLCD::kUser_Line2,"LeftBackM2_%f", logitech.GetRawAxis(2));
			screen -> PrintfLine(DriverStationLCD::kUser_Line3,"RightTopM1_%f", logitech.GetRawAxis(4));
			screen -> PrintfLine(DriverStationLCD::kUser_Line4,"RightTopM2_%f", logitech.GetRawAxis(4));
			screen -> PrintfLine(DriverStationLCD::kUser_Line5,"Button_%d", buttonOne.Get());
			screen -> PrintfLine(DriverStationLCD::kUser_Line6,"toggle_%d", togglebuttonOne.Get());
			
			if (fabs(logitech.GetRawAxis(2)) > driveStickBuffer)
				{
					leftFront.Set((driveSpeedMultiplier) * logitech.GetRawAxis(2)*(-1));
					leftBack.Set((driveSpeedMultiplier) * logitech.GetRawAxis(2)*(-1));
				}		
			else
				{
					leftFront.Set(0);
					leftBack.Set(0);
				}
			if (fabs(logitech.GetRawAxis(4)) > driveStickBuffer)
				{
					rightFront.Set((driveSpeedMultiplier) * logitech.GetRawAxis(4));
					rightBack.Set((driveSpeedMultiplier) * logitech.GetRawAxis(4));
				}
			else
				{
					rightFront.Set(0);
					rightBack.Set(0);
				}
// END TANK DRIVE
			
			
			//screen -> PrintfLine(DriverStationLCD::kUser_Line5,"%f", leftFront.Get());
			//screen -> PrintfLine(DriverStationLCD::kUser_Line6,"%f", rightFront.Get());
			Wait(0.005);
			screen -> UpdateLCD();
		}
	}
	void Test() 
	{
		DriverStationLCD *screen = DriverStationLCD::GetInstance();
		while (IsTest())
		{
			if ((buttonOne.Get()) == 1)
			{
				screen -> PrintfLine(DriverStationLCD::kUser_Line1,"Button1_Not Pressed!");
			}
			else
			{
				screen -> PrintfLine(DriverStationLCD::kUser_Line1,"Button1_Pressed!");
			}
			if ((buttonTwo.Get()) == 1)
			{
				screen -> PrintfLine(DriverStationLCD::kUser_Line2,"Button2_Not Pressed!");
			}
			else
			{
				screen -> PrintfLine(DriverStationLCD::kUser_Line2,"Button2_Pressed!");
			}
			if ((togglebuttonOne.Get()) == 0)
			{
				screen -> PrintfLine(DriverStationLCD::kUser_Line3,"Left Is_On!");
			}
			else
			{
				screen -> PrintfLine(DriverStationLCD::kUser_Line3,"Left Is_Off!");
			}
			if ((togglebuttonTwo.Get()) == 0)
			{
				screen -> PrintfLine(DriverStationLCD::kUser_Line4,"Right Is_On!");
			}
			else
			{
				screen -> PrintfLine(DriverStationLCD::kUser_Line4,"Right Is_Off!");
			}
			/**
		screen -> PrintfLine(DriverStationLCD::kUser_Line1,"ButtonOneIs_%d", buttonOne.Get());
		screen -> PrintfLine(DriverStationLCD::kUser_Line2,"toggle_%d", buttonTwo.Get());
		screen -> PrintfLine(DriverStationLCD::kUser_Line3,"Button_%d", togglebuttonOne.Get());
		screen -> PrintfLine(DriverStationLCD::kUser_Line4,"toggle_%d", togglebuttonTwo.Get());
		*/
		Wait(0.005);
		screen -> UpdateLCD();
		}
	}
};
START_ROBOT_CLASS(RobotDemo);

