// Last Edited by Vivian Fang on 3/19/14  @ 2:39 PM
//This is the most recent operator control code
// Manual load functions are located in PracticeBotOperatorControl
// "CATAPULT FAILSAFE AUTO-REPAIR FUNCTION START" Also located in PracticeBotOperatorControl
// Camera code can't be run as is for autonomous yet, needs a lot of testing
// I reccomend using particleToImagePercent over cameraOrientation as an alternative if it doesnt look like the camera code is working properly or fast enough
// Regardless it would probably be better just to drive forward and shoot -- Risk of missing could be high --

#include "WPILib.h" // Use the WPI Library
#include "Math.h" // Absolute Values Enabled
//#include "string"
class RobotDemo : public SimpleRobot
{
	const static float driveSpeedMultiplier = 0.50;
	const static float driveStickBuffer = 0.4; //sean is leaving me :(
	Joystick logitech; // Logitech Gamepad (Joystick)
	Talon leftFront, leftBack, rightFront, rightBack; // Drive Motors
	Talon retrievalMotor; // Retrieval Motor attached to the wheels located at the top of the retreival arm
	Talon winchMotor; // Winch Motor attached to the Gearbox
	Compressor compressor; // Pneumatics Compressor for the Pneumatics system
	DoubleSolenoid leftArmSolenoid; // Left Retrevial Pneumatic Arm
	DoubleSolenoid rightArmSolenoid; // Right Retrevial Pneumatic Arm
	Solenoid rightArmSolenoidS;
	DoubleSolenoid ratchetSolenoid; // The ratchet needs to be engaged first to load. Disengaged second to shoot
	DigitalInput leftLimitSwitch; // Not actual limit switches. This is the left button to stop the catapult
	DigitalInput rightLimitSwitch; // Not actual limit switches. This is the right button to stop the catapult
	DigitalInput leftPositionSwitch;
	DigitalInput rightPositionSwitch;
	Relay ringLight;
	AxisCamera &camera;
public:
	RobotDemo():
		logitech(1),												// Joystick Port [Laptop USB]
		leftFront(1), leftBack(3), rightFront(2), rightBack(4), 	// Tank Drive Ports [PWM]
		retrievalMotor(6), winchMotor(5), 							// Retrieval and Catapult Winch Motor Ports [PWM]
		compressor(5,2), 											// Compressor connection ports [Digital Sidecar, Digital Sidecar]
		leftArmSolenoid(5,6), 										// Left Arm Solenoid ports [cRIO NI 9472, cRIO NI 9472]
		rightArmSolenoid(7,8), 										// Right Arm Solenoid ports [cRIO NI 9472, cRIO NI 9472]
		rightArmSolenoidS(7),
		ratchetSolenoid(3,4), 										// Ratchet Solenoid ports [cRIO NI 9472, cRIO NI 9472]
		leftLimitSwitch(8), rightLimitSwitch(9), 					// Catapult Limit Switch ports [Digital Sidecar]
		leftPositionSwitch(6), // Left Autonomous Switch [Digital Sidecar]
		rightPositionSwitch(7), // Right Autonomous Switch [Digital Sidecar]
		ringLight(1, Relay::kBothDirections), // Ringlight in Digital Sidecar
		camera(AxisCamera::GetInstance("10.28.53.11"))
	{
		camera.WriteResolution(AxisCamera::kResolution_320x240);
		singleDogSolenoid.Get()==0;
		ratchetSolenoid.Get()==DoubleSolenoid::kReverse;
		if (leftLimitSwitch.Get()== 1 && rightLimitSwitch.Get()== 1 && singleDogSolenoid.Get()==0 && ratchetSolenoid.Get()==DoubleSolenoid::kReverse)
			{
				winchMotor.Set(0.1);
				singleDogSolenoid.Set(1);
				Wait(0.75);
				ratchetSolenoid.Set(DoubleSolenoid::kForward);
				Wait(0.75);
				winchMotor.Set(1);
			}
		if(leftLimitSwitch.Get()== 0 || rightLimitSwitch.Get()== 0)
			{
				winchMotor.Set(0);
			} 
	}
	void Autonomous()
	{
	}
	void OperatorControl()
	{
		DriverStationLCD *screen = DriverStationLCD::GetInstance(); // Enables Driver Station Printing
		int autoLoad = 0;
		int counter = 0;
		while (IsOperatorControl())
		{
			/****** TANK DRIVE START ******/
			if (fabs(logitech.GetRawAxis(2)) > driveStickBuffer)	// If the left Y Axis on the Joystick is moved beyond the driveStickBuffer
				{
					leftFront.Set((driveSpeedMultiplier) * logitech.GetRawAxis(2)*(-1));	// The left motors are facing in an opposite direction
					leftBack.Set((driveSpeedMultiplier) * logitech.GetRawAxis(2)*(-1));		// The left motors are facing in an opposite direction
				}		
			else
				{
					leftFront.Set(0);								// Turns Left Motor 1 off
					leftBack.Set(0);								// Turns Left Motor 2 off
				}
			if (fabs(logitech.GetRawAxis(4)) > driveStickBuffer) 	// If the right Y Axis on the Joystick is moved beyond the driveStickBuffer
				{
					rightFront.Set((driveSpeedMultiplier) * logitech.GetRawAxis(4));	// Sets motor speed to Joystick position times the driveSpeedMultiplier
					rightBack.Set((driveSpeedMultiplier) * logitech.GetRawAxis(4));		// Sets motor speed to Joystick position times the driveSpeedMultiplier
				}
			else
				{
					rightFront.Set(0);  // Turns Right Motor 2 off
					rightBack.Set(0);  // Turns Right Motor 2 off
				}
			if (logitech.GetRawButton(4))
			{	
				retrievalMotor.Set(1);	
			}
			else
			{
				retrievalMotor.Set(0);
			}	
			/****** TANK DRIVE END ******/

			screen -> PrintfLine(DriverStationLCD::kUser_Line1,"LeftJoystick: %f", logitech.GetRawAxis(2));
			screen -> PrintfLine(DriverStationLCD::kUser_Line2,"RightJoystick: %f", logitech.GetRawAxis(4));
			screen -> PrintfLine(DriverStationLCD::kUser_Line3,"RF:%f RB:%f LF:%f LB:%f", rightFront.Get(), rightBack.Get(), leftFront.Get(), leftBack()); // Print WinchMotor State
			screen -> PrintfLine(DriverStationLCD::kUser_Line4,"time:%d", counter);
			counter ++;
			Wait(0.005);																											// Waits to run the loop every 0.005 seconds so the cRIO doesn't explode
			screen->UpdateLCD();			 xx																						// Updates the Driverstation LCD in the loop
		}
	}
	void Test()
	{
		DriverStationLCD *screen = DriverStationLCD::GetInstance();
		int counter = 0;
		int autoLoad = 0;
		bool solenoidTest=0;
		while (IsTest())
		{
			if(logitech.GetRawButton(9)) //press Back
			{
				solenoidTest=1;
			}
			if(logitech.GetRawButton(10)) //press Start
			{
				solenoidTest=0;
			}
			if(solenoidTest)
			{
				if(logitech.GetRawButton(1)) //press X
				{
					rightArmSolenoidS.Set(Solenoid::kOn);
					leftArmSolenoid.Set(DoubleSolenoid::kForward);
				}
				else if(logitech.GetRawButton(2)) //press A
				{
					rightArmSolenoidS.Set(Solenoid::kOff);
					leftArmSolenoid.Set(DoubleSolenoid::kReverse);
				}
				else
				{
					leftArmSolenoid.Set(DoubleSolenoid::kOff);
				}
				if(logitech.GetRawButton(5))
				{
					ratchetSolenoid.Set(DoubleSolenoid::kForward);
				}
				else if(logitech.GetRawButton(7))
				{
					ratchetSolenoid.Set(DoubleSolenoid::kReverse);
				}
				else
				{
					ratchetSolenoid.Set(DoubleSolenoid::kOff);
				}
				if(logitech.GetRawButton(6))
				{
					dogSolenoid.Set(DoubleSolenoid::kForward);
				}
				else if(logitech.GetRawButton(8))
				{
					dogSolenoid.Set(DoubleSolenoid::kReverse);
				}
				else
				{
					dogSolenoid.Set(DoubleSolenoid::kOff);
				}
			}
			else
			{
				if(logitech.GetRawButton(1)) //Press X
				{
					rightFront.Set(logitech.GetRawAxis(2)); //Press left joystick
				}
				else
				{
					rightFront.Set(0);
				}
				if(logitech.GetRawButton(2)) //Press A
				{
					rightBack.Set(logitech.GetRawAxis(2));
				}
				else
				{
					rightBack.Set(0);
				}
				if(logitech.GetRawButton(3)) //Press B
				{
					leftFront.Set(logitech.GetRawAxis(2));
				}
				else
				{
					leftFront.Set(0);
				}
				if(logitech.GetRawButton(4)) //Press Y
				{
					leftBack.Set(logitech.GetRawAxis(2));
				}
				else
				{
					leftBack.Set(0);
				}
				if(logitech.GetRawButton(5)) //Press ULTrigger
				{
					retrievalMotor.Set(logitech.GetRawAxis(2));
				}
				else
				{
					retrievalMotor.Set(0);
				}
				if(logitech.GetRawButton(6)) //PRess URTrigger
				{
					winchMotor.Set(logitech.GetRawAxis(2));
				}
				else
				{
					winchMotor.Set(0);
				}
				if(logitech.GetRawButton(7)) //Press LLTrigger
				{
					ringLight.Set(Relay::kForward);
				}
				else
				{
					ringLight.Set(Relay::kOff);
				}
				if(logitech.GetRawButton(8)) //Press LRTrigger
				{
					compressor.Start();
				}
				else
				{
					compressor.Stop();
				}
			}
			/****** MANUAL LOAD FUNCTION END *****/
			screen -> PrintfLine(DriverStationLCD::kUser_Line1,"LeftJoystick: %f", logitech.GetRawAxis(2));
			screen -> PrintfLine(DriverStationLCD::kUser_Line2,"RF:%f RB:%f LF:%f LB:%f", rightFront.Get(), rightBack.Get(), leftFront.Get(), leftBack()); // Print WinchMotor State
			screen -> PrintfLine(DriverStationLCD::kUser_Line3,"Solenoid Testing:%d", solenoidTest);
			screen -> PrintfLine(DriverStationLCD::kUser_Line4,"time:%d", counter);
			counter ++;
			Wait(0.005);	// Waits to run the loop every 0.005 seconds so the cRIO doesn't explode
			screen->UpdateLCD();
		}
		}
	};
START_ROBOT_CLASS(RobotDemo);
