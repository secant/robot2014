// This was the robot code used for competition on 3/27-3/29. Don't touch it. It is a relic.
// Just incase you weren't paying attention, NO TOUCHY. I KEEL YOU.
// Also, autonomous didn't camera detect properly that day. Camera code was removed from this code and the robot just drove forward for autonomous. Camera code
// can be found under practiceAutonomous.cpp

// ***** CHECKLIST ***** //
/***
 * Precursory: Find the ideal distance that the robot can accurately score from
 * 1. Begin in left position. (Position switches 0 & 1) Take a picture so you have one already for troubleshooting. Test autonomous code when the goal begins hot.
 * 2. Tweak turnRight value until it turns toward the right goal at the ideal angle.
 * 3. Uncomment the driveForward command and continue testing for the amount of time neccessary so that it stops movement at the 
       ideal distance that the robot can accurately score from
 * 4. Begin again in the left position when the goal begins cold.
 * 5. Tweak the time that the driveForward command runs or the speed that it runs
 * 6. Translate all of these values to the right position code but switch the values between the leftFront, leftBack motors with rightFront & rightBack
 * 7. TEST THE LEFT POSITION WITH THE BALL AND STUFF!!! :D NOW TEST IT IN THE RIGHT POSITION!!! (Position switches 1 & 0)
 * ***Middle Position, Facing Left***
 * 8. Begin in the Middle position facing left. (Position switches 1 & 1) Make sure its an ideal angle that allows the camera to see the reflective tape
 * and also can score by driving straight forward. Test autonomous code when the code begins hot.
 * 9. Tweak the turnRightMore value until it turns toward the right goal at the ideal angle.
 * 10. Uncomment the driveForward command and continue testing for the amount of time necessary so that it stops movement at the
 * 		ideal distance that the robot can accurately score from
 * 11. Begin again in the Middle position facing left with the goal cold.
 * 12. Tweak the time that the driveForward command runs or the speed that it runs
 ***Middle Position, Facing Right***
 * 13. Begin in the Middle position facing right. (Position switches 0 & 0) Make sure its an ideal angle that allows the camera to see the reflective tape
 *   and also can score by driving straight forward. Test autonomous code when the code begins hot. 
 * 14. Tweak the turnLefttMore value until it turns toward the left goal at the ideal angle.
 * 15. Uncomment the driveForward command and continue testing for the amount of time necessary so that it stops movement at the
 *   ideal distance that the robot can accurately score from
 * 16. Begin again in the Middle position facing right with the goal cold.
 * 17. Tweak the time that the driveForward command runs or the speed that it runs
 * 
 * *****LAST RESORT IF AT LEAST 2 HOURS FOR AUTONOMOUS ISN'T GIVEN*****
 * Last Resort if it becomes unreasonable to turn left or right as it might crash into alliance robots and prevent both robots from scoring:
 * driveForward();
 * Wait(2);
 * stopDriving();
 * catapultRelease();
 */
#include "WPILib.h" // Use the WPI Library
#include "Math.h" // Absolute Values Enabled
class RobotDemo : public SimpleRobot //all electrical components declared here
{
	const static float driveSpeedMultiplier = 1; 		// Sets the max power of the drive
	const static float driveStickBuffer = 0.1; 		// Sets the threshold for actually moving the drive
	const static float slowDriveSpeed = 0.5;
	const static float fastDriveSpeed = 0.75;
	const static float justIncaseMyPolarityDunGoofed = -1;
	Joystick logitech; 									// Logitech Gamepad (Joystick)
	Talon leftFront, leftBack, rightFront, rightBack; 	// Drive Motors
	Talon retrievalMotor; 								// Retrieval Motor attached to the wheels located at the top of the retreival arm
	Talon winchMotor; 									// Winch Motor attached to the Gearbox
	Compressor compressor; 								// Pneumatics Compressor for the Pneumatics system
	DoubleSolenoid leftArmSolenoid; 					// Left Retrevial Pneumatic Arm
	DoubleSolenoid rightArmSolenoid; 					// Right Retrevial Pneumatic Arm
	DoubleSolenoid dogSolenoid; 						// Disengaged first to shoot
	DoubleSolenoid ratchetSolenoid; 					// Disengaged second to shoot
	DigitalInput leftLimitSwitch; 						// Left button to stop the catapult
	DigitalInput rightLimitSwitch; 						// Right button to stop the catapult
	DigitalInput leftPositionSwitch;					// Starting position in autonomous
	DigitalInput rightPositionSwitch;					//////////////////////////////////
	Relay ringLight;									// Camera light
	AxisCamera &camera;									// Camera
public: //all ports declared here
	RobotDemo():
		logitech(1), // Joystick Port [Laptop USB]
		leftFront(1), leftBack(3), rightFront(2), rightBack(4), // Tank Drive Ports [PWMOUT]
		retrievalMotor(6), winchMotor(5), // Retrieval and Catapult Winch Motor Ports [PWMOUT]
		compressor(5,2), // Compressor connection ports [Relay, Digital IO]
		leftArmSolenoid(5,6), // Left Arm Solenoid ports [Solenoid Breakout, Solenoid Breakout]
		rightArmSolenoid(7,8), //  Arm Solenoid ports [Solenoid Breakout, Solenoid Breakout]
		dogSolenoid(1,2), // Dog Solenoid ports [Solenoid Breakout, Solenoid Breakout]
		ratchetSolenoid(3,4), // Ratchet Solenoid ports [Solenoid Breakout, Solenoid Breakout]
		leftLimitSwitch(8), rightLimitSwitch(9), // Catapult Limit Switch ports [Digital IO]
		/****** AUTONOMOUS ******/
		leftPositionSwitch(6), // Left Autonomous Switch [Digital IO]
		rightPositionSwitch(7), // Right Autonomous Switch [Digital IO]
		ringLight(1, Relay::kBothDirections), // Ringlight [Relay]
		camera(AxisCamera::GetInstance("10.28.53.11")) //IP address of the camera
		{
			//Expirations can be put here. WindRiver gets mad if you remove these braces.
			camera.WriteResolution(AxisCamera::kResolution_320x240); // sets the camera's resolution
			rightFront.SetExpiration(0.1);
			rightBack.SetExpiration(0.1);
			leftFront.SetExpiration(0.1);
			leftBack.SetExpiration(0.1);
			winchMotor.SetExpiration(0.1);
			retrievalMotor.SetExpiration(0.1);
		}
	/****** AUTO FUNCTIONS START *******/
	/**** Yo yo yo the right side motors are inverted, so a positive left motor moves forward and a positive right motor moves back ****/
	void stopDriving() // Stops drive motors
	{
		leftFront.Set(0);
		leftBack.Set(0);
		rightFront.Set(0);
		rightBack.Set(0);
	}
	void driveForward() //Drives forward
	{
		leftFront.Set(justIncaseMyPolarityDunGoofed*(slowDriveSpeed)); // Probably needs to be positive
		leftBack.Set(justIncaseMyPolarityDunGoofed*(slowDriveSpeed)); // Probably needs to be positive
		rightFront.Set(justIncaseMyPolarityDunGoofed*(-1*(slowDriveSpeed))); // Probably needs to be negative
		rightBack.Set(justIncaseMyPolarityDunGoofed*(-1*(slowDriveSpeed))); // Probably needs to be negative
	}
	void turnRight() //Creates a function to turn the robot a set amount right and then stops movement
	{
		leftFront.Set(justIncaseMyPolarityDunGoofed*(slowDriveSpeed)); // Probably needs to be positive
		leftBack.Set(justIncaseMyPolarityDunGoofed*(slowDriveSpeed)); // Probably needs to be positive
		rightFront.Set(justIncaseMyPolarityDunGoofed*(slowDriveSpeed)); // Probably needs to be positive
		rightBack.Set(justIncaseMyPolarityDunGoofed*(slowDriveSpeed)); // Probably needs to be positive
		Wait(0.75);
		leftFront.Set(0);
		leftBack.Set(0);
		rightFront.Set(0);
		rightBack.Set(0);
	}
	void turnLeft() //Creates a function to turn the robot a set amount left and then stops movement
	{
		leftFront.Set(justIncaseMyPolarityDunGoofed*(-1*(slowDriveSpeed))); // Probably needs to be negative
		leftBack.Set(justIncaseMyPolarityDunGoofed*(-1*(slowDriveSpeed))); // Probably needs to be negative
		rightFront.Set(justIncaseMyPolarityDunGoofed*(-1*(slowDriveSpeed))); // Probably needs to be negative
		rightBack.Set(justIncaseMyPolarityDunGoofed*(-1*(slowDriveSpeed))); // Probably needs to be negative
		Wait(0.75);
		leftFront.Set(0);
		leftBack.Set(0);
		rightFront.Set(0);
		rightFront.Set(0);
	}
	void turnLeftMore() //Creates a function to turn the robot a larger set amount left and then stops movement.
	{
		leftFront.Set(justIncaseMyPolarityDunGoofed*(-1*(fastDriveSpeed))); // Probably needs to be negative
		leftBack.Set(justIncaseMyPolarityDunGoofed*(-1*(fastDriveSpeed))); // Probably needs to be negative
		rightFront.Set(justIncaseMyPolarityDunGoofed*(-1*(fastDriveSpeed))); // Probably needs to be negative
		rightBack.Set(justIncaseMyPolarityDunGoofed*(-1*(fastDriveSpeed))); // Probably needs to be negative
		Wait(1);
		leftFront.Set(0);
		leftBack.Set(0);
		rightFront.Set(0);
		rightBack.Set(0);
	}
	void turnRightMore() //Creates a function to turn the robot a larger set amount right and then stops movement.
	{
		leftFront.Set(justIncaseMyPolarityDunGoofed*(fastDriveSpeed)); // Probably needs to be positive
		leftBack.Set(justIncaseMyPolarityDunGoofed*(fastDriveSpeed)); // Probably needs to be positive
		rightFront.Set(justIncaseMyPolarityDunGoofed*(fastDriveSpeed)); // Probably needs to be positive
		rightFront.Set(justIncaseMyPolarityDunGoofed*(fastDriveSpeed)); // Probably needs to be positive
		Wait(1);
		leftFront.Set(0);
		leftBack.Set(0);
		rightFront.Set(0);
		rightBack.Set(0);
	}
	void catapultRelease()
	{
		if ((leftLimitSwitch.Get()== 0 || rightLimitSwitch.Get()== 0) && winchMotor.Get() == 0)
		{
			stopDriving(); // Stops the drive so the robot doesn't flip on itself or something
			winchMotor.Set(0); // Redundant line for extra safety that can be removed after testing (The winch should already be off)
			dogSolenoid.Set(DoubleSolenoid::kForward); // Brings the pneumatic piston backward to disengage the dog gear
			Wait(0.2); // Giving the pistons time to disengage properly
			ratchetSolenoid.Set(DoubleSolenoid::kReverse); // Brings the pneumatic piston backward to disengage the ratchet
		}
	}
	/****** AUTO FUNCTIONS END *******/
	/****OHSHITATUTO****/
	void Autonomous() //YO BRING IT UP IF ITS DOWN
//#if 0		
		{
			compressor.Start(); //starts compressor class
			rightArmSolenoid.Set(DoubleSolenoid::kReverse); //brings the arms down
			leftArmSolenoid.Set(DoubleSolenoid::kReverse);  //brings the arms down
			retrievalMotor.Set(-1);
			if (leftLimitSwitch.Get() == 1 && rightLimitSwitch.Get() == 1)
			{
				winchMotor.Set(0.1); // Gears need to be moving slowly to allow the dog gear to engage properly
				dogSolenoid.Set(DoubleSolenoid::kReverse); // Pushes the pneumatic piston forward to engage the dog gear
				Wait(0.2); // Giving the pistons time to engage properly
				winchMotor.Set(0); // Now that the dog gear is engaged, the gears do not have to move
				ratchetSolenoid.Set(DoubleSolenoid::kForward); // Pushes the pneumatic piston forward to engage the ratchet
				Wait(0.2); // Giving the pistons time to engage properly
			}
			while (leftLimitSwitch.Get() == 1 && rightLimitSwitch.Get() == 1) // If Limit Switch Buttons are not pressed
				{
				winchMotor.Set(1); //Now starts the winch motor to load the catapult
				}
			// If the Catapult Left &  Limit Switches are (0,0), (0,1), (1,0)
			{
				winchMotor.Set(0); // Stops the Winch Motor since one or more buttons are pressed
				if ((dogSolenoid.Get() == DoubleSolenoid::kForward) && (ratchetSolenoid.Get() == DoubleSolenoid::kForward)) // If the Dog Gear is disengaged but the ratchet is engaged
					{
						winchMotor.Set(0.05); // Gears need to be moving slowly to allow the dog gear to engage properly. Might want to test this since the catapult's already loaded.
						dogSolenoid.Set(DoubleSolenoid::kReverse); // Engages the dog gear so both dog gear and ratchet are engaged before shooting for safety
						Wait(0.1); // Giving the pistons time to engage properly
						winchMotor.Set(0); // Now that the dog gear is engaged, the gears do not have to move
					}
				else if ((dogSolenoid.Get() == DoubleSolenoid::kReverse) && (ratchetSolenoid.Get() == DoubleSolenoid::kReverse)) // If the dog gear is engaged but the ratchet is disengaged
					{
						ratchetSolenoid.Set(DoubleSolenoid::kForward); // Engages the ratchet so that both dog gear and ratchet are engaged before shooting for safety
						Wait(0.1); // Giving the pistons time to engage properly
					}
			}
			/*** DONE LOADING THE CATAPULT ***/
				Wait(2);
				ringLight.Set(Relay::kForward); //turns ringlight on
				if((leftLimitSwitch.Get()==1 && rightLimitSwitch.Get()==1)||(leftLimitSwitch.Get()==0 && rightLimitSwitch.Get()==0))
				{
					driveForward();
					Wait(2.60);
					stopDriving();
					Wait(1.3);
				}
				else if(leftLimitSwitch.Get()==1 && rightLimitSwitch.Get()==0)
				{
					driveForward();
					Wait(2.70);
					stopDriving();
					Wait(1.3);
			 	}
				else if(leftLimitSwitch.Get()==0 && rightLimitSwitch.Get()==1)
				{
					driveForward();
					Wait(2.55);
					stopDriving();
					Wait(1.3);
				}
				catapultRelease();
		}
//#endif
	/****OHSHITAUTO END****/
#if 0
	void Autonomous()
	{
		//int counter=0;
		DriverStationLCD *screen = DriverStationLCD::GetInstance();	
		compressor.Start(); //starts compressor class
		rightArmSolenoid.Set(DoubleSolenoid::kReverse); //brings the arms down
		leftArmSolenoid.Set(DoubleSolenoid::kReverse);
		/*** ENSURES THE CATAPULT IS LOADED AND LOADS IF UNLOADED ***/
		if (leftLimitSwitch.Get() == 1 && rightLimitSwitch.Get() == 1)
		{
			winchMotor.Set(0.1); // Gears need to be moving slowly to allow the dog gear to engage properly
			dogSolenoid.Set(DoubleSolenoid::kReverse); // Pushes the pneumatic piston forward to engage the dog gear
			Wait(0.2); // Giving the pistons time to engage properly
			winchMotor.Set(0); // Now that                                                                    n                                                                                                                                                                                the dog gear is engaged, the gears do not have to move
			ratchetSolenoid.Set(DoubleSolenoid::kForward); // Pushes the pneumatic piston forward to engage the ratchet
			Wait(0.2); // Giving the pistons time to engage properly
		}
		while (leftLimitSwitch.Get() == 1 && rightLimitSwitch.Get() == 1) // If Limit Switch Buttons are not pressed
			{
				winchMotor.Set(1); //Now starts the winch motor to load the catapult
				Wait(0.005);
			}
		// If the Catapult Left &  Limit Switches are (0,0), (0,1), (1,0)
		{
			winchMotor.Set(0); // Stops the Winch Motor since one or more buttons are pressed
			if ((dogSolenoid.Get() == DoubleSolenoid::kForward) && (ratchetSolenoid.Get() == DoubleSolenoid::kReverse)) // If the Dog Gear is disengaged but the ratchet is engaged
				{
					winchMotor.Set(0.05); // Gears need to be moving slowly to allow the dog gear to engage properly. Might want to test this since the catapult's already loaded.
					dogSolenoid.Set(DoubleSolenoid::kReverse); // Engages the dog gear so both dog gear and ratchet are engaged before shooting for safety
					Wait(0.1); // Giving the pistons time to engage properly
					winchMotor.Set(0); // Now that the dog gear is engaged, the gears do not have to move
					ratchetSolenoid.Set(DoubleSolenoid::kForward);
					Wait (0.1);
				}
			else if ((dogSolenoid.Get() == DoubleSolenoid::kForward) && (ratchetSolenoid.Get() == DoubleSolenoid::kForward)) // If the Dog Gear is disengaged but the ratchet is engaged
				{
					winchMotor.Set(0.05); // Gears need to be moving slowly to allow the dog gear to engage properly. Might want to test this since the catapult's already loaded.
					dogSolenoid.Set(DoubleSolenoid::kReverse); // Engages the dog gear so both dog gear and ratchet are engaged before shooting for safety
					Wait(0.1); // Giving the pistons time to engage properly
					winchMotor.Set(0); // Now that the dog gear is engaged, the gears do not have to move
				}
			else if ((dogSolenoid.Get() == DoubleSolenoid::kReverse) && (ratchetSolenoid.Get() == DoubleSolenoid::kReverse)) // If the dog gear is engaged but the ratchet is disengaged
				{
					ratchetSolenoid.Set(DoubleSolenoid::kForward); // Engages the ratchet so that both dog gear and ratchet are engaged before shooting for safety
					Wait(0.1); // Giving the pistons time to engage properly
				}
		}
		/*** DONE LOADING THE CATAPULT ***/
		float pLower = 5; // min height of rectangle for comparison
		float pUpper = 15;	// max height of rectangle for comparison
		int criteriaCount = 1; // number of elements to include/exclude at a time
		int rejectMatches = 1;	// when set to true, particles that do not meet the criteria are discarded
		int connectivity = 1;	// declares connectivity value as 1; so corners are not ignored
		int filterFunction;	// removes small blobs
		int borderSetting;	// variable to store border settings, limit for rectangle
		int borderSize = 1;  // border for the camera frame (if you don't put this, DriverStation gets mad at you)
		ParticleFilterCriteria2 particleCriteria;	
		ParticleFilterOptions2 particleFilterOptions;
		int numParticles;
		particleCriteria.parameter = IMAQ_MT_BOUNDING_RECT_HEIGHT; //The Morphological measurement we use
		particleCriteria.lower = pLower; // The lower bound of the criteria range
		particleCriteria.upper = pUpper; // The upper bound of the criteria range
		particleCriteria.calibrated = FALSE; // We aren't calibrating to real world measurements. We don't need this.
		particleCriteria.exclude = TRUE; // Remove all particles that aren't in specific pLower and pUpper range
		particleFilterOptions.rejectMatches = rejectMatches; // Set to 1 above, so images that do not meet the criteria are discarded
		particleFilterOptions.rejectBorder = 0; // Set to 0 over here so border images are not discarded
		particleFilterOptions.connectivity8 = connectivity; // Sets the image image to 8 bit
		{
			HSLImage* imgpointer; // declares an image container as an HSL (hue-saturation-luminence) image
			imgpointer = camera.GetImage();	//tells camera to capture image
			ringLight.Set(Relay::kForward); //turns ringlight on
			BinaryImage* binIMG = NULL;	// declares a container to hold a binary image
			binIMG = imgpointer -> ThresholdHSL(0, 255, 0, 255, 235, 255);	// thresholds HSL image and places in the binary image container
			delete imgpointer;	// deletes the HSL image to free up memory on the cRIO
			Image* modifiedImage = imaqCreateImage(IMAQ_IMAGE_U8, 0); //create a binary 8-bit format shell for the image
			filterFunction = imaqParticleFilter4(modifiedImage, binIMG -> GetImaqImage(), &particleCriteria, criteriaCount, &particleFilterOptions, NULL, &numParticles); //The Particle Filter Function we use. (The ones before it are outdated)
			borderSetting = imaqSetBorderSize(modifiedImage, borderSize); // Sets a border size so DriverStation is happy
			delete binIMG; //Deletes the Binary image
			int functionCountParticles; // stores number of particles
			int particleAmount; // stores the number of particles for the measure particle function
			functionCountParticles = imaqCountParticles(modifiedImage, TRUE, &particleAmount); // Counts the number of particles
			int functionOne; // The first measuring particle function (specifically for particle #1)
			int functionTwo; // The second measuring particle function (specifically for particle #2)
			double particleOneOrientation; // TRULY ARBITRARY name of the first particle it find
			double particleTwoOrientation; // TRULY ARBITRARY name of the second particle it finds
			functionOne = imaqMeasureParticle(modifiedImage, 0, FALSE, IMAQ_MT_ORIENTATION, &particleOneOrientation); // Measures orientation of particle 1
			functionTwo = imaqMeasureParticle(modifiedImage, 1, FALSE, IMAQ_MT_ORIENTATION, &particleTwoOrientation); // Measures orientation of particle 2
			screen->PrintfLine(DriverStationLCD::kUser_Line2,"P1: %f", particleOneOrientation); // Prints particle 1's orientation
			screen->PrintfLine(DriverStationLCD::kUser_Line3,"P2: %f", particleTwoOrientation); // Prints particle 2's orientation
			screen -> PrintfLine(DriverStationLCD::kUser_Line5,"R: %f L: %f)", rightFront.Get(), leftFront.Get());
			//screen -> PrintfLine(DriverStationLCD::kUser_Line6,"Counter %d", counter);
			screen->UpdateLCD();
			imaqDispose(modifiedImage); // Deletes the filtered image
			/**LEFT POSITION**/
			if ((leftPositionSwitch.Get() == 1) && (rightPositionSwitch.Get() == 0)) // Left switch set on, right switch set off
			{
				screen -> PrintfLine(DriverStationLCD::kUser_Line1,"Left Position:F"); // Left position and facing forward			
				if ((particleOneOrientation > 0 && particleOneOrientation < 10) || (particleTwoOrientation > 0 && particleTwoOrientation < 10))
					
					// The target should be hot. Now it goes to the other goal.
					/* Theoretically particle 1 or 2 should register as exactly 0 (the particle is horizontal). We can edit these later. */
				{
					screen -> PrintfLine(DriverStationLCD::kUser_Line4,"Left Position Hot!");
					// These DEFINITELY need to be tested. All of them. Forreal.
					turnRight();
					//driveForward();
					Wait(3); 
					stopDriving();
					catapultRelease();
					Wait(5); // Waits 5 seconds after shooting before starting to load the catapult
				}
				else // The target isn't hot. So it starts going toward this not hot goal.
				{
					screen -> PrintfLine(DriverStationLCD::kUser_Line4,"Left Position Not Hot");
					// These DEFINITELY need to be tested. All of them. Forreal.
					turnRight();
					driveForward();
					Wait(4);
					stopDriving();
					catapultRelease();
					Wait(5); // Waits 5 seconds after shooting before starting to load the catapult
				}		
			}
			/**CENTER POSITION**/
			else if ((leftPositionSwitch.Get() == 0) && (rightPositionSwitch.Get() == 0)) // Left switch off and  switch off
			{
				screen -> PrintfLine(DriverStationLCD::kUser_Line1,"Middle Position:R"); // Middle position and facing 			
				if ((particleOneOrientation > 0 && particleOneOrientation < 10) || (particleTwoOrientation > 0 && particleTwoOrientation < 10)) // The target should be hot. Now it goes to the other goal.
					/* Theoretically particle 1 or 2 should register as exactly 0 (the particle is horizontal). We can edit these later. */
				{
					screen -> PrintfLine(DriverStationLCD::kUser_Line4,"Middle Position Hot");
					// These DEFINITELY need to be tested. All of them. Forreal.
					turnLeftMore();
					driveForward();
					Wait(3); 
					stopDriving();
					catapultRelease();
					Wait(5); // Waits 5 seconds after shooting before starting to load the catapult
				}
				else // The target isn't hot. So it starts going toward this not hot goal.
				{
					screen -> PrintfLine(DriverStationLCD::kUser_Line4,"Middle Position Not Hot");
					// These DEFINITELY need to be tested. All of them. Forreal.
					driveForward();
					Wait(3);
					stopDriving();
					catapultRelease();
					Wait(5); // Waits 5 seconds after shooting before starting to load the catapult
				}
			}
			/** CENTER RIGHT POSITION**/
			else if ((leftPositionSwitch.Get() == 1) && (rightPositionSwitch.Get() == 1))
			{
				screen -> PrintfLine(DriverStationLCD::kUser_Line1,"Middle Position:R"); // Middle position and facing
				if ((particleOneOrientation > 0 && particleOneOrientation < 10) || (particleTwoOrientation > 0 && particleTwoOrientation < 10)) // The target should be hot. Now it goes to the other goal.
					/* Theoretically particle 1 or 2 should register as exactly 0 (the particle is horizontal). We can edit these later. */
					{
						screen -> PrintfLine(DriverStationLCD::kUser_Line4,"Middle Position Hot");
						// These DEFINITELY need to be tested. All of them. Forreal.
						turnLeftMore();
						driveForward();
						Wait(3); 
						stopDriving();
						catapultRelease();
						Wait(5); // Waits 5 seconds after shooting before starting to load the catapult
					}
					else // The target isn't hot. So it starts going toward this not hot goal.
					{
						screen -> PrintfLine(DriverStationLCD::kUser_Line4,"Middle Position Not Hot");
						// These DEFINITELY need to be tested. All of them. Forreal.
						driveForward();
						Wait(3);
						stopDriving();
						catapultRelease();
						Wait(5); // Waits 5 seconds after shooting before starting to load the catapult
					}
				
			}
			/** RIGHT POSITION **/
			else if (((leftPositionSwitch.Get()) == 1) && ((rightPositionSwitch.Get()) == 0)) // Left switch off and  switch on
			{
				screen -> PrintfLine(DriverStationLCD::kUser_Line1,"Right Position"); //  position and facing forward
				if ((particleOneOrientation > 0 && particleOneOrientation < 10) || ((particleTwoOrientation > 0) && (particleTwoOrientation < 10))) // The target should be hot. Now it goes to the other goal.
					/* Theoretically particle 1 or 2 should register as exactly 0 (the particle is horizontal). We can edit these later. */
				{
					screen -> PrintfLine(DriverStationLCD::kUser_Line4,"Right Position Hot");
					// These DEFINITELY need to be tested. All of them. Forreal.
					turnLeft();
					driveForward();
					Wait(3);
					stopDriving();
					catapultRelease();
					Wait(5); // Waits 5 seconds after shooting before starting to load the catapult
				}
				else // The target isn't hot. So it starts going toward this not hot goal.
				{
					screen -> PrintfLine(DriverStationLCD::kUser_Line4, "Right Position Not Hot");
					// These DEFINITELY need to be tested. All of them. Forreal.
					driveForward();
					Wait(3);
					stopDriving();
					catapultRelease();
					Wait(5); // Waits 5 seconds after shooting before starting to load the catapult
				}
			}
			//counter++;
		}
		compressor.Stop();
	}
#endif
	void OperatorControl()
	{
		compressor.Start(); // The class can run independently. This compressor will start and stop on its own to keep pressure under 120 PSI
		DriverStationLCD *screen = DriverStationLCD::GetInstance(); // Enables Driver Station Printing
		bool autoLoad = false; //autoLoad function
		bool winchKill = false;
		retrievalMotor.Set(-1); //Starts with retrieval wheels on
		while (IsOperatorControl())
		{
			winchKill = false;
			/****** AUTO LOAD TOGGLE START *****/
			if(logitech.GetRawButton(10))
			{
				if(autoLoad)
				{
					autoLoad = false;
					Wait(0.2);	
				}
				
				else if(!autoLoad)
				{
					autoLoad = true;
					Wait(0.2);
				}
			}
			/****** AUTO LOAD TOGGLE END *****/
			/** RETRIEVAL WHEELS: RED button (B) turns the arm wheels off, GREEN button (A) turns arm wheels on, BLUE button (X) turns the arm wheels in reverse**/
			if(logitech.GetRawButton(1))
			{
				retrievalMotor.Set(1);
			}
			if(logitech.GetRawButton(2))
			{
				retrievalMotor.Set(-1);
			}
			if(logitech.GetRawButton(3))
			{
				retrievalMotor.Set(0);
			}
			/** OPTIONS ON DEM WHEELZ END **/
			
			/****** TANK DRIVE START ******/
			if (fabs(logitech.GetRawAxis(2)) > driveStickBuffer) // If the left Y Axis on the Joystick is moved beyond the driveStickBuffer
				{
					if (logitech.GetRawButton(11))
					{
						leftFront.Set(logitech.GetRawAxis(2)*(1));
						leftBack.Set(logitech.GetRawAxis(2)*(1));
					}
					else
					{
						leftFront.Set((driveSpeedMultiplier) * logitech.GetRawAxis(2)*(1)); // The left motors are facing in an opposite direction
						leftBack.Set((driveSpeedMultiplier) * logitech.GetRawAxis(2)*(1)); // The left motors are facing in an opposite direction
					}
				}		
			else
			{
				leftFront.Set(0); // Turns Left Motor 1 off
				leftBack.Set(0); // Turns Left Motor 2 off
			}
			if (fabs(logitech.GetRawAxis(4)) > driveStickBuffer) // If the Right Y Axis on the Joystick is moved beyond the driveStickBuffer
			{
				if (logitech.GetRawButton(12))
				{
					rightFront.Set(logitech.GetRawAxis(4)*(-1));
					rightBack.Set(logitech.GetRawAxis(4)*(-1));
				}
				else
				{
					rightFront.Set((driveSpeedMultiplier) * logitech.GetRawAxis(4) * (-1)); // Sets motor speed to Joystick position times the driveSpeedMultiplier
					rightBack.Set((driveSpeedMultiplier) * logitech.GetRawAxis(4) * (-1)); // Sets motor speed to Joystick position times the driveSpeedMultiplier
				}
			}
			else
			{
				rightFront.Set(0);  // Turns Right Motor 1 off
				rightBack.Set(0);  // Turns Right Motor 2 off
			}
			/****** TANK DRIVE END ******/
			
			/****** BALL RETRIEVAL START ******/ /*CHECK THE POLARITY OF YOUR SOLENOIDS*/
			if (logitech.GetRawButton(8)) 										//Press Lower Right Trigger to go down and STOP ball motor
			{		
				leftArmSolenoid.Set(DoubleSolenoid::kReverse);				// Pushes the pneumatic piston forward to lower the retrieval arm
				rightArmSolenoid.Set(DoubleSolenoid::kReverse);				// Pushes the pneumatic piston forward to lower the retrieval arm
			}
			else if (logitech.GetRawButton(6))								//Press Upper  Trigger to go up and STOP ball motor
			{
				leftArmSolenoid.Set(DoubleSolenoid::kForward);				// Brings the pneumatic piston backward to raise the retrieval arm
				rightArmSolenoid.Set(DoubleSolenoid::kForward);				// Brings the pneumatic piston backward to raise the retrieval arm
			}
			else //check this
			{
				leftArmSolenoid.Set(DoubleSolenoid::kOff);					// Does nothing to the retrieval arm piston //
				rightArmSolenoid.Set(DoubleSolenoid::kOff);					//////////////////////////////////////////////
			}
			/****** BALL RETRIEVAL END ******/		
			
			/******* AUTOLOAD CATAPULT START ******/ // Limit Buttons not pressed, both dogSolenoid and ratchetSolenoids are disengaged
			if (autoLoad && leftLimitSwitch.Get()==1 && rightLimitSwitch.Get()==1)
			{	
				Wait(2.5);
				dogSolenoid.Set(DoubleSolenoid::kReverse);		// Brings the pneumatic piston backward to raise the retrieval arm
				winchMotor.Set(0.1);
				Wait(0.3);
				winchMotor.Set(0);
				ratchetSolenoid.Set(DoubleSolenoid::kForward);	// Pushes the pneumatic piston forward to lower the retrieval arm
				Wait(0.1);
				while(leftLimitSwitch.Get()==1 && rightLimitSwitch.Get()==1 && !winchKill)
				{
					winchMotor.Set(1);
					/**ALLOW FOR WHILE LOOP TANK DRIVING**/
					if (fabs(logitech.GetRawAxis(2)) > driveStickBuffer) // If the left Y Axis on the Joystick is moved beyond the driveStickBuffer
					{
						leftFront.Set((driveSpeedMultiplier) * logitech.GetRawAxis(2)*(1)); // The left motors are facing in an opposite direction
						leftBack.Set((driveSpeedMultiplier) * logitech.GetRawAxis(2)*(1)); // The left motors are facing in an opposite direction
					}		
					else
					{
						leftFront.Set(0); // Turns Left Motor 1 off
						leftBack.Set(0); // Turns Left Motor 2 off
					}
					if (fabs(logitech.GetRawAxis(4)) > driveStickBuffer) // If the  Y Axis on the Joystick is moved beyond the driveStickBuffer
					{
						rightFront.Set((driveSpeedMultiplier) * logitech.GetRawAxis(4) * (-1)); // Sets motor speed to Joystick position times the driveSpeedMultiplier
						rightBack.Set((driveSpeedMultiplier) * logitech.GetRawAxis(4) * (-1)); // Sets motor speed to Joystick position times the driveSpeedMultiplier
					}
					else
					{
						rightFront.Set(0);  // Turns  Motor 2 off
						rightBack.Set(0);  // Turns  Motor 2 off
					}
					/**END ALLOW FOR WHILE LOOP TANK DRIVING **/
					if(logitech.GetRawButton(9)) //kills the winch
					{
						winchMotor.Set(0);
						winchKill = true;
						autoLoad = false;
					}
				}
				winchMotor.Set(0); // Stops the Winch Motor since one or more buttons are pressed
			}
			/****** AUTOLOAD CATAPULT END ******/
			
			/****** MANUAL LOAD CATAPULT START ******/
			if (!autoLoad)
			{
				if (logitech.GetRawButton(5) && leftLimitSwitch.Get()==1 && rightLimitSwitch.Get()==1) //pressing Upper Left Trigger loads
				{
					dogSolenoid.Set(DoubleSolenoid::kReverse);		// Brings the pneumatic piston backward to raise the retrieval arm
					winchMotor.Set(0.1);
					Wait(0.3);
					ratchetSolenoid.Set(DoubleSolenoid::kForward);	// Pushes the pneumatic piston forward to lower the retrieval arm
					while(leftLimitSwitch.Get()==1 && rightLimitSwitch.Get()==1 && !winchKill)
					{
						winchMotor.Set(1);
						/**ALLOW FOR WHILE LOOP TANK DRIVING**/
						if (fabs(logitech.GetRawAxis(2)) > driveStickBuffer) // If the left Y Axis on the Joystick is moved beyond the driveStickBuffer
						{
							leftFront.Set((driveSpeedMultiplier) * logitech.GetRawAxis(2)*(-1)); // The left motors are facing in an opposite direction
							leftBack.Set((driveSpeedMultiplier) * logitech.GetRawAxis(2)*(-1)); // The left motors are facing in an opposite direction
						}		
						else
						{
							leftFront.Set(0); // Turns Left Motor 1 off
							leftBack.Set(0); // Turns Left Motor 2 off
						}
						if (fabs(logitech.GetRawAxis(4)) > driveStickBuffer) // If the  Y Axis on the Joystick is moved beyond the driveStickBuffer
						{
							rightFront.Set((driveSpeedMultiplier) * logitech.GetRawAxis(4)); // Sets motor speed to Joystick position times the driveSpeedMultiplier
							rightBack.Set((driveSpeedMultiplier) * logitech.GetRawAxis(4)); // Sets motor speed to Joystick position times the driveSpeedMultiplier
						}
						else
						{
							rightFront.Set(0);  // Turns  Motor 2 off
							rightBack.Set(0);  // Turns  Motor 2 off
						}
						if(logitech.GetRawButton(9)) //kills the winch
						{
							winchMotor.Set(0);
							winchKill = true;
						}
					}
					winchMotor.Set(0); //shuts the winch motor off
				}
			}
			/****** MANUAL LOAD CATAPULT END ******/
			/****** CATAPULT RELEASE START ******/ // Limit Buttons pressed, winchMotor is inactive, and lower left trigger on the joystick is pressed
			if ((leftLimitSwitch.Get()== 0 || rightLimitSwitch.Get()== 0) && winchMotor.Get() == 0 &&  logitech.GetRawButton(7))
			{
				catapultRelease();
			}
			/****** CATAPULT RELEASE END ******/
			screen -> PrintfLine(DriverStationLCD::kUser_Line1,"Pressure:%f", compressor.GetPressureSwitchValue()); // Print Pneumatics Pressure
			screen -> PrintfLine(DriverStationLCD::kUser_Line2,"LimSwi:%d and %d", leftLimitSwitch.Get(), rightLimitSwitch.Get()); // Print Left & Right Buttons
			screen -> PrintfLine(DriverStationLCD::kUser_Line3,"WinchMotor:%f", winchMotor.Get()); // Print WinchMotor State
			screen -> PrintfLine(DriverStationLCD::kUser_Line4,"Autoload:%s", autoLoad? "On" : "Off" ); // Print state of autoLoad
			//screen -> PrintfLine(DriverStationLCD::kUser_Line5,""); // Free Line
			screen -> PrintfLine(DriverStationLCD::kUser_Line6,"LDri:%f RDri:%f", leftFront.Get(), rightFront.Get()); // Print Tank Drive Motor State
			Wait(0.005); // Waits to run the loop every 0.005 seconds so the cRIO doesn't explode
			screen->UpdateLCD(); // Updates the Driver Station LCD in the loop
		}
		compressor.Stop(); // Allows the compressor to stop running if the mode is switched outside of OperatorControl
	}
	void Test() // DONT TOUCH THIS AREA. I KEEL YOU.
	{
		DriverStationLCD *screen = DriverStationLCD::GetInstance();
		int counter = 0;
		bool solenoidTest=0;
		while (IsTest())
		{
			if(logitech.GetRawButton(9)) //press rightBack
			{
				solenoidTest=1;
				compressor.Start();
			}
			if(logitech.GetRawButton(10)) //press Start
			{
				solenoidTest=0;
				compressor.Stop();
			}
			if(solenoidTest)
			{
				if(logitech.GetRawButton(1)) //press X
				{
					rightArmSolenoid.Set(DoubleSolenoid::kReverse);
					leftArmSolenoid.Set(DoubleSolenoid::kReverse);
				}
				else if(logitech.GetRawButton(2)) //press A
				{
					rightArmSolenoid.Set(DoubleSolenoid::kForward);
					leftArmSolenoid.Set(DoubleSolenoid::kForward);
				}
				else
				{
					leftArmSolenoid.Set(DoubleSolenoid::kOff);
					rightArmSolenoid.Set(DoubleSolenoid::kOff);
				}
				if(logitech.GetRawButton(3)) //PRess URTrigger
				{
					retrievalMotor.Set(logitech.GetRawAxis(2));
				}
				else
				{
					retrievalMotor.Set(0);
				}
				if(logitech.GetRawButton(4))
				{
					winchMotor.Set(logitech.GetRawAxis(2));
				}
				else
				{
					winchMotor.Set(0);
				}
				if(logitech.GetRawButton(5))
				{
					ratchetSolenoid.Set(DoubleSolenoid::kForward);
				}
				else if(logitech.GetRawButton(7))
				{
					ratchetSolenoid.Set(DoubleSolenoid::kReverse);
				}
				else
				{
					ratchetSolenoid.Set(DoubleSolenoid::kOff);
				}
				if(logitech.GetRawButton(6))
				{
					dogSolenoid.Set(DoubleSolenoid::kReverse);
				}
				else if(logitech.GetRawButton(8))
				{
					dogSolenoid.Set(DoubleSolenoid::kForward);
				}
				else
				{
					dogSolenoid.Set(DoubleSolenoid::kOff);
				}
			}
			else
			{
				if(logitech.GetRawButton(1)) //Press X
				{
					rightFront.Set(logitech.GetRawAxis(2)); //Press left joystick
				}
				else
				{
					rightFront.Set(0);
				}
				if(logitech.GetRawButton(2)) //Press A
				{
					rightBack.Set(logitech.GetRawAxis(2));
				}
				else
				{
					rightBack.Set(0);
				}
				if(logitech.GetRawButton(3)) //Press B
				{
					leftFront.Set(logitech.GetRawAxis(2));
				}
				else
				{
					leftFront.Set(0);
				}
				if(logitech.GetRawButton(4)) //Press Y
				{
					leftBack.Set(logitech.GetRawAxis(2));
				}
				else
				{
					leftBack.Set(0);
				}
				if(logitech.GetRawButton(5)) //Press ULTrigger
				{
					retrievalMotor.Set(logitech.GetRawAxis(2));
				}
				else
				{
					retrievalMotor.Set(0);
				}
				if(logitech.GetRawButton(6)) //PRess URTrigger
				{
					winchMotor.Set(logitech.GetRawAxis(2));
				}
				else
				{
					winchMotor.Set(0);
				}
				if(logitech.GetRawButton(7)) //Press LLTrigger
				{
					ringLight.Set(Relay::kForward);
				}
				else
				{
					ringLight.Set(Relay::kOff);
				}
				if(logitech.GetRawButton(8)) //Press LRTrigger
				{
					compressor.Start();
				}
				else
				{
					compressor.Stop();
				}
			}
			/****** MANUAL LOAD FUNCTION END *****/
			screen -> PrintfLine(DriverStationLCD::kUser_Line1,"LeftJoystick: %f", logitech.GetRawAxis(2));
			screen -> PrintfLine(DriverStationLCD::kUser_Line2,"RF:%f RB:%f LF:%f LB:%f", rightFront.Get(), rightBack.Get(), leftFront.Get(), leftBack.Get()); // Print WinchMotor State
			screen -> PrintfLine(DriverStationLCD::kUser_Line3,"Solenoid Testing:%d", solenoidTest);
			screen -> PrintfLine(DriverStationLCD::kUser_Line4,"rightArmSolenoid:%d", rightArmSolenoid.Get());
			screen -> PrintfLine(DriverStationLCD::kUser_Line5,"time:%d", counter);
			counter ++;
			
			Wait(0.005);	// Waits to run the loop every 0.005 seconds so the cRIO doesn't explode
			screen->UpdateLCD();
		}
	}
};
START_ROBOT_CLASS(RobotDemo);